{
    "schema-version": "0.5",
    "name": "SPARK",
    "tool-version": "v0.1.0",
    "tags": {
                 "domain": "neuroinformatics"
    },

    "command-line": "octave --no-gui $SPARK_ROOT/SPARK.m [FMRI_DATA] [MASK] [OUT_DIR] [NB_RESAMPLING] [NETWORK_SCALES] [NB_ITERATIONS] [P_VALUE] [RESAMPLING_METHOD] [BLOCK_WINDOW_LENGTH] [DICT_INIT_METHOD] [SPARSE_CODING_METHOD] [PRESERVE_ATOMS_DICT] [MAX_PARALLEL_JOBS] [PSOM_GB_CONF]",
    "description": "SParsity-based Analysis of Reliable K-hubness for Brain Functional Connectivity fMRI", 
    "container-image":
        {
            "index": "docker.io",
            "type": "singularity",
            "image": "multifunkimlab/spark:1.2.1"
    },         
    "groups": [
        {
            "id": "bootstrap_resampling",
            "members": [
                "nb_resampling",
                "resampling_method",
                "block_window_length"
            ],
            "name": "Bootstrap resampling"
        },
        {
            "id": "sparse_dict_learning",
            "members": [
                "network_scales",
                "nb_iterations",
                "dict_init_method",
                "sparse_coding_method",
                "preserve_atoms_dict"
            ],
            "name": "Sparse dictionary learning"
        },
        {
            "id": "k_hubness_map_generation",
            "members": [
                "p_value"
            ],
            "name": "k-hubness map generation"
        }
    ],
    "output-files": [
        {
            "id": "result",
            "optional": false,
            "value-key": "[OUT_DIR]",
            "name": "Results folder",
            "path-template": "[OUT_DIR]",
            "description": "the folder with results"
        }
    ],
    "inputs": [
        {
            "id": "fmri_data",
            "optional": false,
            "value-key": "[FMRI_DATA]",
            "list": true,
            "command-line-flag": "--fmri-data",
            "description": "The list of paths to the fMRI data to analyze.\nTo seperate subjects, insert ' ,, ' between the paths.\nTo seperate runs insert ' , ' between the paths.\nFor instance:\npath_sub1_run1 , path_sub1_run2 ,, path_sub2_run1\n\n(file formats: MINC, NIfTI)\n(type: %(type)s)\n____________________________________________________________\n",
            "type": "String",
            "name": "Preprocessed fMRI data"
        },
        {
            "id": "mask",
            "optional": false,
            "value-key": "[MASK]",
            "command-line-flag": "--mask",
            "description": "Path to the grey-matter mask.\n\n(file formats: MINC, NIfTI)\n(type: %(type)s)\n____________________________________________________________\n",
            "type": "String",
            "name": "Grey matter mask"
        },
        {
            "id": "out_dir",
            "optional": false,
            "value-key": "[OUT_DIR]",
            "command-line-flag": "--out-dir",
            "description": "Path to the output directory.\n\n(type: %(type)s)\n____________________________________________________________\n",
            "type": "String",
            "name": "out_dir"
        },
        {
            "id": "nb_resampling",
            "optional": false,
            "value-key": "[NB_RESAMPLING]",
            "command-line-flag": "--nb-resampling",
            "description": "Number of bootstrap resampling at the individual level. \n\n(valid values: %(metavar)s>=2)\n(recommended: 100)\n(type: %(type)s)\n____________________________________________________________\n",
            "type": "Number",
            "name": "Number of resampling"
        },
        {
            "id": "network_scales",
            "optional": false,
            "value-key": "[NETWORK_SCALES]",
            "list": true,
            "command-line-flag": "--network-scales",
            "description": "Three numbers, respectively: [begin] [step] [end], used to \ncreate a regularly-spaced vector. In order to specify a \nsingle number, for instance '15', enter the same number for \n[begin] and [end], as: 15 1 15. \nThis vector of numbers corresponds to the range of network \nscales to be tested. An optimal network scale is estimated \nfrom the specified set of numbers.\n\n(valid values: %(metavar)s>=1)\n(recommended: 10 2 30)\n(type: %(type)s)\n____________________________________________________________\n",
            "type": "Number",
            "name": "Network scales"
        },
        {
            "id": "nb_iterations",
            "optional": false,
            "value-key": "[NB_ITERATIONS]",
            "command-line-flag": "--nb-iterations",
            "description": "Number of iterations for the sparse dictionary learning.\n\n(valid values: %(metavar)s>=2)\n(recommended: 20)\n(type: %(type)s)\n____________________________________________________________\n",
            "type": "Number",
            "name": "Number of iterations"
        },
        {
            "id": "p_value",
            "optional": false,
            "value-key": "[P_VALUE]",
            "command-line-flag": "--p-value",
            "description": "Significance level, using a Z-test, for removing \ninconsistent elements in the average sparse coefficients \n(considered as the Gaussian noise) after spatial clustering \nusing the threshold k-th. \n\n(valid values: 0<=%(metavar)s<=1)\n(type: %(type)s)\n____________________________________________________________\n",
            "type": "Number",
            "name": "P-Value"
        },
        {
            "id": "resampling_method",
            "optional": true,
            "value-key": "[RESAMPLING_METHOD]",
            "type": "String",
            "value-choices": [
                "CBB",
                "AR1B",
                "AR1G"
            ],
            "command-line-flag": "--resampling-method",
            "description": "Method (from NIAK) used to resample the data under the null \nhypothesis.\n\nNote: If 'CBB' is selected, the option --block-window-length\nis used.\n\n- CBB: Circular-block-bootstrap sample of multiple time \nseries.\n- AR1B: Bootstrap sample of multiple time series based on a \nsemiparametric scheme mixing an auto-regressive temporal \nmodel and i.i.d. bootstrap of the \"innovations\".\n- AR1G: (Bootstrap sample of multiple time series based on a\nparametric model of Gaussian data with arbitrary spatial \ncorrelations and first-order auto-regressive temporal\ncorrelations.\n\n(valid values: %(choices)s)\n(default: %(default)s)\n(type: %(type)s)\n____________________________________________________________\n",
            "default-value": "CBB",
            "name": "Resampling method"
        },
        {
            "id": "block_window_length",
            "optional": true,
            "value-key": "[BLOCK_WINDOW_LENGTH]",
            "type": "Number",
            "list": true,
            "command-line-flag": "--block-window-length",
            "name": "Block window length",
            "default-value": [
                10,
                1,
                30
            ],
            "description": "Three numbers, respectively: [begin] [step] [end], used to \ncreate a regularly-spaced vector. In order to specify a \nsingle number, for instance '15', enter the same number for \n[begin] and [end], as: 15 1 15. \nA number in this vector corresponds to a window length used \nin the circular block bootstrap. The unit of the window \nlength is \u2018time-point\u2019 with each time-point indicating a 3D\nscan at each TR. If multiple numbers are specified, then a\nnumber is randomly selected from the list at each \nresampling. \nIt is recommended to use a minimum of sqrt(T), where T is \nthe total number of time points in the fMRI time-course. It\nis also recommended to randomize the window length to reduce\na bias by window size.\n\n(valid values: %(metavar)s>=1)\n(default: 10 1 30)\n(type: %(type)s)\n____________________________________________________________\n"
        },
        {
            "id": "dict_init_method",
            "optional": true,
            "value-key": "[DICT_INIT_METHOD]",
            "type": "String",
            "value-choices": [
                "GivenMatrix",
                "DataElements"
            ],
            "command-line-flag": "--dict-init-method",
            "description": "If 'GivenMatrix' is selected, then the dictionary will be\ninitialized by a random permutation of the raw data obtained\nin step 1.\nIf 'DataElements' is selected, then the dictionary will be\ninitialized by the first N (number of atoms) columns in the\nraw data obtained in step 1.Shows this help message and\nexits.\n\n(valid values: %(choices)s)\n(default: %(default)s)\n(type: %(type)s)\n____________________________________________________________\n",
            "default-value": "GivenMatrix",
            "name": "Dictionary initialization method"
        },
        {
            "id": "sparse_coding_method",
            "optional": true,
            "value-key": "[SPARSE_CODING_METHOD]",
            "type": "String",
            "value-choices": [
                "OMP",
                "Thresholding"
            ],
            "command-line-flag": "--sparse-coding-method",
            "description": "Sparse coding method for the sparse dictionary learning. \n\n(valid values: %(choices)s)\n(default: %(default)s)\n(type: %(type)s)\n____________________________________________________________\n",
            "default-value": "Thresholding",
            "name": "Sparse coding method"
        },
        {
            "id": "preserve_atoms_dict",
            "optional": true,
            "value-key": "[PRESERVE_ATOMS_DICT]",
            "type": "String",
            "command-line-flag": "--neglect-atoms-dict",
            "description": "If set, then all atoms except the last will be trained and \nupdated, while the last one will be fixed as a constant \nvector (of ones).\n____________________________________________________________\n",
            "default-value": true,
            "name": "Perserve atoms dictionary flag"
        },
        {
            "id": "max_parallel_jobs",
            "optional": true,
            "value-key": "[MAX_PARALLEL_JOBS]",
            "type": "Number",
            "command-line-flag": "--max-parallel-jobs",
            "description": "Number of jobs to run in parallel.\n\n(valid values: %(metavar)s>=1)\n(default: %(default)s)\n(type: %(type)s)\n____________________________________________________________\n",
            "default-value": 12,
            "name": "max_parallel_jobs"
        },
        {
            "id": "psom_gb_conf",
            "optional": true,
            "value-key": "[PSOM_GB_CONF]",
            "type": "File",
            "command-line-flag": "--psom-gb-conf",
            "description": "Path to the file for configuring the PSOM global variables.\nThe PSOM global variables defined in this file will\noverwrite the ones in psom_gb_vars.m.\nNote: Setting the temporary directory from this file could\nbe ignored.\n\n(type: %(type)s)\n____________________________________________________________\n",
            "default-value": "/usr/local/spark/util/psom_conf/psom_gb_vars_local.m",
            "name": "PSOM config file"
        }
    ]
}

